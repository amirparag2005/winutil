Задание 1
using System;

class Program
{
    static void Main()
    {
        Console.WriteLine("Тип данных: byte");
        Console.WriteLine($"Минимальное значение: {byte.MinValue}");
        Console.WriteLine($"Максимальное значение: {byte.MaxValue}");

        Console.WriteLine("Тип данных: short");
        Console.WriteLine($"Минимальное значение: {short.MinValue}");
        Console.WriteLine($"Максимальное значение: {short.MaxValue}");

        Console.WriteLine("Тип данных: int");
        Console.WriteLine($"Минимальное значение: {int.MinValue}");
        Console.WriteLine($"Максимальное значение: {int.MaxValue}");

        Console.WriteLine("Тип данных: long");
        Console.WriteLine($"Минимальное значение: {long.MinValue}");
        Console.WriteLine($"Максимальное значение: {long.MaxValue}");

        Console.WriteLine("Тип данных: float");
        Console.WriteLine($"Минимальное значение: {float.MinValue}");
        Console.WriteLine($"Максимальное значение: {float.MaxValue}");

        Console.WriteLine("Тип данных: double");
        Console.WriteLine($"Минимальное значение: {double.MinValue}");
        Console.WriteLine($"Максимальное значение: {double.MaxValue}");
    }
}
Задание 2
using System;

public class Rectangle
{
    private double sideA;
    private double sideB;

    public Rectangle(double sideA, double sideB)
    {
        this.sideA = sideA;
        this.sideB = sideB;
    }

    private double CalculateArea()
    {
        return sideA * sideB;
    }

    private double CalculatePerimeter()
    {
        return 2 * (sideA + sideB);
    }

    public double Area
    {
        get { return CalculateArea(); }
    }

    public double Perimeter
    {
        get { return CalculatePerimeter(); }
    }
}

class Program
{
    static void Main()
    {
        Console.Write("Введите длину стороны A: ");
        double sideA = Convert.ToDouble(Console.ReadLine());

        Console.Write("Введите длину стороны B: ");
        double sideB = Convert.ToDouble(Console.ReadLine());

        Rectangle rectangle = new Rectangle(sideA, sideB);
        Console.WriteLine($"Площадь: {rectangle.Area}");
        Console.WriteLine($"Периметр: {rectangle.Perimeter}");
    }
}
Задание 3
using System;

public class Point
{
    public int X { get; }
    public int Y { get; }

    public Point(int x, int y)
    {
        X = x;
        Y = y;
    }
}

public class Figure
{
    private Point[] points;
    public string Name { get; }
    
    public Figure(Point p1, Point p2, Point p3) : this("Triangle", p1, p2, p3) { }
    public Figure(Point p1, Point p2, Point p3, Point p4) : this("Quadrilateral", p1, p2, p3, p4) { }
    public Figure(Point p1, Point p2, Point p3, Point p4, Point p5) : this("Pentagon", p1, p2, p3, p4, p5) { }

    private Figure(string name, params Point[] points)
    {
        Name = name;
        this.points = points;
    }

    public double LengthSide(Point A, Point B)
    {
        return Math.Sqrt(Math.Pow(B.X - A.X, 2) + Math.Pow(B.Y - A.Y, 2));
    }

    public double PerimeterCalculator()
    {
        double perimeter = 0;
        for (int i = 0; i < points.Length; i++)
        {
            perimeter += LengthSide(points[i], points[(i + 1) % points.Length]);
        }
        return perimeter;
    }
}

class Program
{
    static void Main()
    {
        Point p1 = new Point(0, 0);
        Point p2 = new Point(0, 3);
        Point p3= new Point(4, 3);
        Point p4 = new Point(4, 0);

        Figure figure = new Figure(p1, p2, p3, p4);
        Console.WriteLine($"Название фигуры: {figure.Name}");
        Console.WriteLine($"Периметр: {figure.PerimeterCalculator()}");
    }
}
using NUnit.Framework;

[TestFixture]
public class RectangleTests
{
    [Test]
    public void TestAreaCalculation()
    {
        var rectangle = new Rectangle(5, 10);
        Assert.AreEqual(50, rectangle.Area);
    }

    [Test]
    public void TestPerimeterCalculation()
    {
        var rectangle = new Rectangle(5, 10);
        Assert.AreEqual(30, rectangle.Perimeter);
    }
}

[TestFixture]
public class FigureTests
{
    [Test]
    public void TestPerimeterCalculation()
    {
        Point p1 = new Point(0, 0);
        Point p2 = new Point(0, 3);
        Point p3 = new Point(4, 3);
        Point p4 = new Point(4, 0);
        Figure figure = new Figure(p1, p2, p3, p4);
        
        Assert.AreEqual(14, figure.PerimeterCalculator());
    }
}
