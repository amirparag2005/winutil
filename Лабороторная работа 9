//1 задание
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

class lab091
{
    static readonly Mutex mutex = new Mutex();
    static async Task Main()
    {


        List<string> tickers = new List<string>();

        using (StreamReader reader = new StreamReader("ticker.txt"))
        {
            string line;
            while ((line = reader.ReadLine()) != null)
            {//будет выполнять итерации до тех пор, пока ReadLine() не вернет null. Внутри цикла считываем каждую строку и добавляем ее в список tickers
                tickers.Add(line);
            }
        }


        List<Task> tasks = new List<Task>();
        foreach (string ticker in tickers)
        {

            tasks.Add(GetDataForTicker(ticker));
            System.Threading.Thread.Sleep(600);

        }
        await Task.WhenAll(tasks);


    }

    static async Task GetDataForTicker(string ticker)
    {
        using (HttpClient client = new HttpClient())
        {
            try
            {

                string url = $"https://api.marketdata.app/v1/stocks/candles/D/{ticker}/?from=2023-11-02&to=2024-11-01&token=RFU4aDItQlRLRjFuNDd5OVlMWGs4UGh6eXY5bldMWDRvS0xxOHctcmNLOD0";

                HttpResponseMessage response = await client.GetAsync(url);

                string responseContent = await response.Content.ReadAsStringAsync();
                dynamic responceObject = Newtonsoft.Json.JsonConvert.DeserializeObject(responseContent);
                double averagePrice = 0;
                if (responceObject != null && responceObject.t != null && responceObject.h != null && responceObject.l != null)
                {
                    List<long> timestamps = responceObject?.t?.ToObject<List<long>>() ?? new List<long>();
                    List<double> highs = responceObject?.h?.ToObject<List<double>>() ?? new List<double>();
                    List<double> lows = responceObject?.l?.ToObject<List<double>>() ?? new List<double>();

                    for (int i = 0; i < timestamps.Count; i++)
                    {
                        averagePrice += (highs[i] + lows[i]) / 2;
                    }
                    averagePrice /= timestamps.Count;
                    if (averagePrice == 0)
                    {
                        Console.WriteLine($"Ошибка при обработке {ticker}: Отсутствуют данные.");
                        await WriteToFile(ticker, averagePrice);
                    }
                    else
                    {
                        await WriteToFile(ticker, averagePrice);
                    }

                }

            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при обработке {ticker}: {ex.Message}");
            }

        }
    }




    private static async Task WriteToFile(string ticker, double averagePrice)
    {
        mutex.WaitOne();
        try
        {
            using (StreamWriter writer = new StreamWriter("Average.txt", true))
            {
                await writer.WriteAsync($"{ticker}:{averagePrice} \n");
                Console.WriteLine($"{ticker}: {averagePrice}");
            }
        }
        finally
        {
            mutex.ReleaseMutex(); // Освобождаем мьютекс после завершения операции
        }
    }
}
//2 задание
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.Http;
using Newtonsoft.Json.Linq;
using System.Xml.Linq;

namespace network_application
{



    internal static class Program
    {

        /// <summary>
        ///  The main entry point for the application.
        /// </summary>
        [STAThread]
        static async Task Main()
        {

            ApplicationConfiguration.Initialize();
            Application.Run(new Form1());


        }
    }
}using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using System.IO;
using System.Globalization;


namespace network_application
{
    public partial class Form1 : Form
    {
        private static readonly HttpClient client = new HttpClient();
        private const string apiKey = "c0bca192b2e8c99548078dfb57a5150c";
        private List<Grad> cities;
        private ListBox cityListBox;
        private Label weatherLabel;
        private Button getWeatherButton;
        public Form1()
        {
            InitializeComponent();

            cities = LoadCitiesFromFile("city.txt");

            cityListBox = new ListBox();
            weatherLabel = new Label();
            getWeatherButton = new Button();

            // Настройка элементов
            cityListBox.Location = new Point(230, 150);
            cityListBox.Size = new Size(200, 200);
            cityListBox.DataSource = cities.Select(c => c.Name).ToList();

            weatherLabel.Location = new Point(440, 210);
            weatherLabel.Size = new Size(300, 500);

            getWeatherButton.Location = new Point(430, 150);
            getWeatherButton.Size = new Size(150, 30);
            getWeatherButton.Text = "Узнать погоду";
            getWeatherButton.Click += GetWeatherButton_Click;

            Controls.Add(cityListBox);
            Controls.Add(weatherLabel);
            Controls.Add(getWeatherButton);
        }

        private List<Grad> LoadCitiesFromFile(string filename)
        {
            List<Grad> cities = new List<Grad>();
            foreach (string line in File.ReadAllLines(filename))
            {
                string[] parts = line.Replace(", ", "\t").Replace(".", ",").Split('\t');
                if (parts.Length == 3)
                {
                    Grad city = new Grad(
                        parts[0].Trim(),
                        Convert.ToDouble(parts[1]),
                        Convert.ToDouble(parts[2])
                    );
                    cities.Add(city);
                }
            }
            return cities;
        }

        private async void GetWeatherButton_Click(object sender, EventArgs e)
        {
            string selectedCityName = cityListBox.SelectedItem?.ToString();
            if (selectedCityName != null)
            {
                Grad selectedCity = cities.FirstOrDefault(c => c.Name == selectedCityName);
                if (selectedCity != null)
                {

                    Weather? weather = await GetWeatherAsync(selectedCity.Lat, selectedCity.Lon);
                    if (weather != null)
                    {

                        weatherLabel.Text = weather.Value.ToString();
                    }
                    else
                    {
                        weatherLabel.Text = "Не удалось получить данные о погоде.";
                    }
                }
                else
                {
                    weatherLabel.Text = "Город не найден.";
                }
            }
            else
            {
                weatherLabel.Text = "Выберите город.";
            }
        }

        private static async Task<Weather?> GetWeatherAsync(double lat, double lon)
        {
            try
            {
                var response = await client.GetStringAsync($"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&units=metric&appid={apiKey}");
                dynamic json = JsonConvert.DeserializeObject(response);if (json.sys.country != null)
                {
                    return new Weather
                    {
                        Country = json.sys.country,
                        Name = json.name,
                        Temp = json.main.temp,
                        Description = json.weather[0].description
                    };
                }
                return null;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при получении данных о погоде: {ex.Message}");
                return null;
            }
        }
    }
    public struct Weather
    {
        public string Country { get; set; }
        public string Name { get; set; }
        public float Temp { get; set; }
        public string Description { get; set; }

        public Weather(string country, string name, float temp, string description)
        {
            Country = country;
            Name = name;
            Temp = temp;
            Description = description;
        }

        public override string ToString()
        {
            return $"Страна: {Country}\nНазвание города: {Name}\nТемпература воздуха: {Temp}°C\nОписание погоды: {Description}\n";
        }
    }

    public class Grad
    {
        public string Name { get; set; }
        public double Lat { get; set; }
        public double Lon { get; set; }

        public Grad(string name, double lat, double lon)
        {
            Name = name;
            Lat = lat;
            Lon = lon;
        }
    }
}
