Задание 1
using System;

public class MyMatrix
{
    private int[,] matrix;
    private Random random = new Random();

    // Конструктор, который создаёт матрицу с заданным количеством строк и столбцов
    public MyMatrix(int rows, int cols, int minValue, int maxValue)
    {
        matrix = new int[rows, cols];
        Fill(minValue, maxValue);
    }

    // Метод для заполнения матрицы случайными значениями
    public void Fill(int minValue, int maxValue)
    {
        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                matrix[i, j] = random.Next(minValue, maxValue);
            }
        }
    }

    // Метод для изменения размера матрицы
    public void ChangeSize(int newRows, int newCols)
    {
        int[,] newMatrix = new int[newRows, newCols];

        // Копируем существующие значения
        for (int i = 0; i < Math.Min(matrix.GetLength(0), newRows); i++)
        {
            for (int j = 0; j < Math.Min(matrix.GetLength(1), newCols); j++)
            {
                newMatrix[i, j] = matrix[i, j];
            }
        }

        // Заполняем новую часть случайными значениями
        for (int i = 0; i < newRows; i++)
        {
            for (int j = 0; j < newCols; j++)
            {
                if (i >= matrix.GetLength(0) || j >= matrix.GetLength(1))
                {
                    newMatrix[i, j] = random.Next(0, 100); // Пример диапазона
                }
            }
        }

        matrix = newMatrix;
    }

    // Метод для показа части матрицы
    public void ShowPartialy(int startRow, int endRow, int startCol, int endCol)
    {
        for (int i = startRow; i <= endRow; i++)
        {
            for (int j = startCol; j <= endCol; j++)
            {
                Console.Write(matrix[i, j] + "\t");
            }
            Console.WriteLine();
        }
    }

    // Метод для показа всей матрицы
    public void Show()
    {
        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                Console.Write(matrix[i, j] + "\t");
            }
            Console.WriteLine();
        }
    }

    // Индексатор для доступа к элементам матрицы
    public int this[int row, int col]
    {
        get => matrix[row, col];
        set => matrix[row, col] = value;
    }
}

class Program
{
    static void Main()
    {
        Console.Write("Введите количество строк: ");
        int rows = int.Parse(Console.ReadLine());
        Console.Write("Введите количество столбцов: ");
        int cols = int.Parse(Console.ReadLine());
        Console.Write("Введите минимальное значение: ");
        int minValue = int.Parse(Console.ReadLine());
        Console.Write("Введите максимальное значение: ");
        int maxValue = int.Parse(Console.ReadLine());

        MyMatrix myMatrix = new MyMatrix(rows, cols, minValue, maxValue);
        myMatrix.Show();

        // Примеры использования
        Console.WriteLine("\nИзменяем размер матрицы (добавляем строки и колонки):");
        myMatrix.ChangeSize(rows + 2, cols + 2);
        myMatrix.Show();

        Console.WriteLine("\nПоказать часть матрицы:");
        myMatrix.ShowPartialy(1, 3, 1, 3);
    }
}
Задание 2
using System;

public class MyList<T>
{
    private T[] items;
    private int count;

    public MyList()
    {
        items = new T[4]; // Начальный размер массива
        count = 0;
    }

    // Метод для добавления элемента
    public void Add(T item)
    {
        if (count >= items.Length)
        {
            Resize();
        }

        items[count++] = item;
    }

    // Метод для изменения размера массива
    private void Resize()
    {
        T[] newItems = new T[items.Length * 2];
        Array.Copy(items, newItems, items.Length);
        items = newItems;
    }

    // Индексатор для доступа к элементам
    publicT this[int index]
    {
        get => items[index];
        set => items[index] = value;
    }

    // Свойство для получения общего количества элементов
    public int Count => count;
}

// Пример использования MyList
class Program
{
    static void Main()
    {
        MyList<int> myList = new MyList<int>();

        myList.Add(10);
        myList.Add(20);
        myList.Add(30);
        
        Console.WriteLine("Элементы списка:");
        for (int i = 0; i < myList.Count; i++)
        {
            Console.WriteLine(myList[i]);
        }
    }
}
Задание 3
using System;

public class MyDictionary<TKey, TValue>
{
    private TKey[] keys;
    private TValue[] values;
    private int count;

    public MyDictionary()
    {
        keys = new TKey[4]; // Начальный размер массива
        values = new TValue[4];
        count = 0;
    }

    // Метод для добавления элемента
    public void Add(TKey key, TValue value)
    {
        if (count >= keys.Length)
        {
            Resize();
        }

        keys[count] = key;
        values[count] = value;
        count++;
    }

    // Метод для изменения размера массива
    private void Resize()
    {
        TKey[] newKeys = new TKey[keys.Length * 2];
        TValue[] newValues = new TValue[values.Length * 2];
        Array.Copy(keys, newKeys, keys.Length);
        Array.Copy(values, newValues, values.Length);
        keys = newKeys;
        values = newValues;
    }

    // Индексатор для доступа к элементам
    public TValue this[TKey key]
    {
        get
        {
            for (int i = 0; i < count; i++)
            {
                if (keys[i].Equals(key))
                {
                    return values[i];
                }
            }
            throw new KeyNotFoundException("Ключ не найден");
        }
        set
        {
            for (int i = 0; i < count; i++)
            {
                if (keys[i].Equals(key))
                {
                    values[i] = value;
                    return;
                }
            }
            throw new KeyNotFoundException("Ключ не найден");
        }
    }

    // Свойство только для чтения для получения общего количества элементов
    public int Count => count;

    // Метод для перебора элементов
    public void PrintAll()
    {
        for (int i = 0; i < count; i++)
        {
            Console.WriteLine($"Ключ: {keys[i]}, Значение: {values[i]}");
        }
    }
}

class Program
{
    static void Main()
    {
        MyDictionary<int, string> myDictionary = new MyDictionary<int, string>();

        myDictionary.Add(1, "Один");
        myDictionary.Add(2, "Два");
        myDictionary.Add(3, "Три");

        Console.WriteLine("ЭлементыDictionary:");
        myDictionary.PrintAll();
    }
}

